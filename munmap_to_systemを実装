//
// >>>> malloc challenge! <<<<
//
// Your task is to improve utilization and speed of the following malloc
// implementation.
// Initial implementation is the same as the one implemented in simple_malloc.c.
// For the detailed explanation, please refer to simple_malloc.c.

#include <stdlib.h>
#include <limits.h>
#include <assert.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//
// Interfaces to get memory pages from OS
//

void* mmap_from_system(size_t size);
void munmap_to_system(void* ptr, size_t size);

//
// Struct definitions
//

typedef struct my_metadata_t {
    size_t size;
    struct my_metadata_t* next;
} my_metadata_t;

typedef struct my_heap_t {
    my_metadata_t* free_head[5];
    my_metadata_t dummy;
} my_heap_t;

//
// Static variables (DO NOT ADD ANOTHER STATIC VARIABLES!)
//
my_heap_t my_heap;

//
// Helper functions (feel free to add/remove/edit!)
//

size_t getHeapIndex(size_t size)
{
    if (size < 32) {
        return 0;
    } else if (size < 64) {
        return 1;
    } else if (size < 128) {
        return 2;
    } else if (size < 2048) {
        return 3;
    } else{
      return 4;
    }
}


void my_add_to_free_list(my_metadata_t* metadata)
{
    assert(!metadata->next);
    size_t heap_index = getHeapIndex(metadata->size);
    metadata->next = my_heap.free_head[heap_index];
    my_heap.free_head[heap_index] = metadata;
}

void my_remove_from_free_list(my_metadata_t* metadata, my_metadata_t* prev)
{
    size_t heap_index = getHeapIndex(metadata->size);
    if (prev) {
        prev->next = metadata->next;
    } else {
        my_heap.free_head[heap_index] = metadata->next;
    }
    metadata->next = NULL;
}

void my_remove_from_free_list_with_index(my_metadata_t* metadata, my_metadata_t* prev, size_t heap_index)
{
    if (prev) {
        prev->next = metadata->next;
    } else {
        my_heap.free_head[heap_index] = metadata->next;
    }
    metadata->next = NULL;
}

//
// Interfaces of malloc (DO NOT RENAME FOLLOWING FUNCTIONS!)
//

// This is called at the beginning of each challenge.
void my_initialize()
{
    for (int i = 0; i < 5; ++i) {
        my_heap.free_head[i] = &my_heap.dummy;
    }
    my_heap.dummy.size = 0;
    my_heap.dummy.next = NULL;
}


// my_malloc() is called every time an object is allocated.
// |size| is guaranteed to be a multiple of 8 bytes and meets 8 <= |size| <=
// 4000. You are not allowed to use any library functions other than
// mmap_from_system() / munmap_to_system().
void* my_malloc(size_t size)
{

    size_t heap_index = getHeapIndex(size);
    size_t best_fit_index;

    my_metadata_t* best_fit = NULL;
    my_metadata_t* best_fit_prev = NULL;
    // First-fit: Find the first free slot the object fits.
    // TODO: Update this logic to Best-fit!
    //size_t searching_count = 0;
    for (size_t i = heap_index; i < 5  && !best_fit; ++i) { // best_fitが見つからなかったら１つ次のheapも探す
        my_metadata_t* metadata = my_heap.free_head[i];
        my_metadata_t* prev = NULL;
        while (metadata) {
            if ((!best_fit || metadata->size < best_fit->size) && metadata->size >= size) {
                best_fit = metadata;
                best_fit_prev = prev;
                best_fit_index = i;
            }
            if (best_fit){
              int diff = abs((int)(best_fit->size - size));
              if (diff < size * 0.01){ //差分がtargetのsizeの0.01倍のものが見つかったら終了
                break;
              }
            }
            prev = metadata;
            metadata = metadata->next;
        }
    }
    // now, metadata points to the first free slot
    // and prev is the previous entry.

    //printf("%p\n",best_fit);
    //printf("%p\n",best_fit_prev);

    if (!best_fit) {
        // There was no free slot available. We need to request a new memory region
        // from the system by calling mmap_from_system().
        //
        //     | metadata | free slot |
        //     ^
        //     metadata
        //     <---------------------->
        //            buffer_size
        size_t buffer_size = 4096;
        my_metadata_t* metadata = (my_metadata_t*)mmap_from_system(buffer_size);
        metadata->size = buffer_size - sizeof(my_metadata_t);
        metadata->next = NULL;
        // Add the memory region to the free list.
        my_add_to_free_list(metadata);
        // Now, try my_malloc() again. This should succeed.
        return my_malloc(size);
    }

    // |ptr| is the beginning of the allocated object.
    //
    // ... | metadata | object | ...
    //     ^          ^
    //     metadata   ptr
    //printf("called best fit\n");
    void* ptr = best_fit + 1;
    size_t remaining_size = best_fit->size - size;
    best_fit->size = size;
    // Remove the free slot from the free list.
    my_remove_from_free_list_with_index(best_fit, best_fit_prev, best_fit_index);

    if (remaining_size > sizeof(my_metadata_t)) {
        //printf("create new metadata for remaining free slot\n");
        // Create a new metadata for the remaining free slot.
        //
        // ... | metadata | object | metadata | free slot | ...
        //     ^          ^        ^
        //     metadata   ptr      new_metadata
        //                 <------><---------------------->
        //                   size       remaining size
        my_metadata_t* new_metadata = (my_metadata_t*)((char*)ptr + size);
        new_metadata->size = remaining_size - sizeof(my_metadata_t);
        new_metadata->next = NULL;
        // Add the remaining free slot to the free list.
        my_add_to_free_list(new_metadata);
    }
    return ptr;
}

// This is called every time an object is freed.  You are not allowed to
// use any library functions other than mmap_from_system / munmap_to_system.
void my_free(void* ptr)
{
    // Look up the metadata. The metadata is placed just prior to the object.
    //
    // ... | metadata | object | ...
    //     ^          ^
    //     metadata   ptr
    my_metadata_t *metadata = (my_metadata_t *)ptr - 1;

    size_t size = metadata->size;
    int bin_index = getHeapIndex(size);

   
    if ((char *)metadata + metadata->size + sizeof(my_metadata_t) == (char *)metadata -> next) { //後ろのdataも空いていたら連結
          // Merge with next block
          metadata->size += metadata -> next ->size + sizeof(my_metadata_t);
          my_remove_from_free_list(metadata->next,metadata);
    }
    my_add_to_free_list(metadata);
}

// This is called at the end of each challenge.
void my_finalize()
{   

  for (int i = 0; i < 5; i++){　　//最後にmunmap_to_systemをするために隣接しているfreeノードを結合
    my_metadata_t *current = my_heap.free_head[i];
    my_metadata_t *prev = NULL;
    while(current){
      if ((char *)current +current->size + sizeof(my_metadata_t) == (char *)current->next) {
      // Merge with next block
      current->next ->size += current->size + sizeof(my_metadata_t);
      my_remove_from_free_list(current, prev);
      }
        prev = current;
        current = current->next;
    }
  }
  
    // datasize 4096以上でmunmap_to_systemできるものがあるか調べる
    for (int i = 0; i < 5; i++){
      my_metadata_t *current = my_heap.free_head[i];
      my_metadata_t *prev = NULL;
      while (current){
      if (current->size + sizeof(my_metadata_t) == 4096){
        munmap_to_system(current, current->size + sizeof(my_metadata_t));
        my_remove_from_free_list(current,prev);
      
      }
      prev = current;
      current = current -> next;
      }
    }
}

void test()
{
    // Implement here!
    assert(1 == 1); /* 1 is 1. That's always true! (You can remove this.) */
}