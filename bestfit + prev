#include <assert.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void *mmap_from_system(size_t size);
void munmap_to_system(void *ptr, size_t size);

typedef struct my_metadata_t {
    size_t size;
    struct my_metadata_t *next;
    struct my_metadata_t *prev;
} my_metadata_t;

typedef struct my_heap_t {
    my_metadata_t* free_head[4];
    my_metadata_t dummy[4];
} my_heap_t;

my_heap_t my_heap;

size_t getHeapIndex(size_t size) {
    if (size < 1000) {
        return 0;
    } else if (size < 2000) {
        return 1;
    } else if (size < 3000) {
        return 2;
    } else {
        return 3;
    }
}

void my_add_to_free_list(my_metadata_t *metadata) {
    assert(!metadata->next && !metadata->prev);
    size_t bin_index = getHeapIndex(metadata->size);

    metadata->next = my_heap.free_head[bin_index];
    metadata->prev = &my_heap.dummy[bin_index];
    if (my_heap.free_head[bin_index] != &my_heap.dummy[bin_index]) {
        my_heap.free_head[bin_index]->prev = metadata;
    }

    my_heap.free_head[bin_index] = metadata;
}

void my_remove_from_free_list(my_metadata_t *metadata) {
    if (metadata->prev) {
        metadata->prev->next = metadata->next;
    }
    if (metadata->next) {
        metadata->next->prev = metadata->prev;
    }
    if (my_heap.free_head[getHeapIndex(metadata->size)] == metadata) {
        my_heap.free_head[getHeapIndex(metadata->size)] = metadata->next;
    }
    metadata->next = NULL;
    metadata->prev = NULL;
}

void my_initialize() {
    for (int i = 0; i < 4; ++i) {
        my_heap.free_head[i] = &my_heap.dummy[i];
        my_heap.dummy[i].size = 0;
        my_heap.dummy[i].next = NULL;
        my_heap.dummy[i].prev = NULL;
    }
}

void *my_malloc(size_t size) {
    int bin_index = getHeapIndex(size);
    my_metadata_t *best_fit = NULL;
    my_metadata_t *metadata = my_heap.free_head[bin_index];

    while (metadata != &my_heap.dummy[bin_index]) {
        if ((!best_fit || metadata->size < best_fit->size) && metadata->size >= size) {
            best_fit = metadata;
        }
        metadata = metadata->next;
    }

    if (!best_fit) {
        size_t buffer_size = 4096;
        my_metadata_t *new_metadata = (my_metadata_t *)mmap_from_system(buffer_size);
        new_metadata->size = buffer_size - sizeof(my_metadata_t);
        new_metadata->next = NULL;
        new_metadata->prev = NULL;
        my_add_to_free_list(new_metadata);
        return my_malloc(size);
    }

    void *ptr = best_fit + 1;
    size_t remaining_size = best_fit->size - size;
    my_remove_from_free_list(best_fit);

    if (remaining_size > sizeof(my_metadata_t)) {
        best_fit->size = size;
        my_metadata_t *new_metadata = (my_metadata_t *)((char *)ptr + size);
        new_metadata->size = remaining_size - sizeof(my_metadata_t);
        new_metadata->next = NULL;
        new_metadata->prev = NULL;
        my_add_to_free_list(new_metadata);
    }
    return ptr;
}

void my_merge_blocks(my_metadata_t *metadata) {
    if (metadata->next && (char *)metadata + metadata->size + sizeof(my_metadata_t) == (char *)metadata->next) {
        metadata->size += metadata->next->size + sizeof(my_metadata_t);
        my_remove_from_free_list(metadata->next);
    }
    if (metadata->prev != &my_heap.dummy[getHeapIndex(metadata->size)] && 
        (char *)metadata->prev + metadata->prev->size + sizeof(my_metadata_t) == (char *)metadata) {
        metadata->prev->size += metadata->size + sizeof(my_metadata_t);
        my_remove_from_free_list(metadata);
        metadata = metadata->prev;
    }
}

void my_free(void *ptr) {
    my_metadata_t *metadata = (my_metadata_t *)ptr - 1;
    my_merge_blocks(metadata);
    my_add_to_free_list(metadata);
}

void my_finalize() {
    // Nothing is here for now.
    // feel free to add something if you want!
}

void test() {
    // Implement here!
    assert(1 == 1); /* 1 is 1. That's always true! (You can remove this.) */
}
