第二回　STEP HOMEWORK
田村優帆
問1 hash_table.py

calculate_hash… 桁ごとに重みをつけることで、anagramの場合でもhashが異なるようにした。

Re_hash…getメソッドにより要素を追加した際に、再ハッシュをする関数。
要素数がテーブルサイズの70％を上回ったら、元の長さの2倍に最も近い素数に、
テーブルサイズが初期値の97より大きいが要素数が30%を下回る場合に1/2に近い素数にテーブルサイズを変える。
そして、新しいテーブルにitemを入れなおす。素数か判断はis_prime, iitemの再配置はre_putで行っている。


Delete…ハッシュ値を計算しbucketの中を探索する。キーがヘッドではない場合、
キーのひとつ前の next ポインタをキーの next ポインタに設定する。キーがヘッドである場合、
head ポインタをキーの next ポインタに設定する。

問2
ハッシュテーブルは衝突が多い場合や再ハッシュが多く必要な場合
メモリ使用量が増えるため。
また、ハッシュ内の単方向リストはランダムな順番で挿入されているため、
効率的に検索をすることが難しいから。


問3,4 Cache.py
CacheItem: urlとcontentsを要素として持つ双方向リストの要素

Cache hash_table.pyのhash_tableと双方向リストをつなげることで、探索、削除をo(1)で行おうとした。

Access_page… urlの.comより前の部分のハッシュ値を計算しhash_tableに格納されていなかった場合、
cacheの一番後ろのものを削除し新たに追加する。すでにcacheの中にあるものの場合、一番後ろの要素であればそのまま、
そうでなければcacheの再構成を行う。この際、cacheの中のどの位置にアクセスしたurlがあるかを探さなければいけないため
ポインタを用いて探索するほかなかった。

Get_page… url_listにcacheの中の要素のurlを入れ出力する。


